application live {	# Name it whatever you prefer. You will need at least one application, you can have many more.
    live on;		# on|off. Enables this application and allowing live streaming to it. Default=on.
    # max_streams 32;	# Sets maximum number of RTMP streams. Default value is 32 which is usually ok for most cases. Default=32.
    # max_connections 100;	# Sets maximum number of connections for rtmp engine. Default=off. 
    meta on;		# on|copy|off. Receive metadata packets containing predefined fields like width, height etc. Default=on.
    interleave off;		# on|off. Audio and video data is transmitted on the same RTMP chunk stream. Default=off.
    wait_key on;		# on|off. Makes video stream start with a key frame. Default=off.
    wait_video off;		# on|off. Disable audio until first video frame is sent (can cause delay). Default=off.
    drop_idle_publisher 10s; # Drop publisher that has been idle for this time. Only works when connection is in publish mode. Default=off
    sync 300ms;		# When timestamp difference exceeds the value specifiedan absolute frame is sent fixing that. Default=300ms.
    play_restart on;	# on|off. If enabled sends "NetStream.Play.Start" and "NetStream.Play.Stop" every time publishing starts or stops. Default=off.
    idle_streams on;	# on|off. If disabled prevents viewers from connecting to idle/nonexistent streams and disconnects all. Default=on.

    ## NOTIFICATIONS  - This section has too many options to include in this example config. ##
    ## Notifications use HTTP callback to inform subscribers that stream has started. You will need a website that can handle these. ##
    ## These option go beyond the scope of this configuration file as it contains lots of info. Please visit this url for more info: ##
    ## https://github.com/arut/nginx-rtmp-module/wiki/Directives#notify ##

    publish_notify off;	## on|off. Send "NetStream.Play.PublishNotify" & "NetStream.Play.UnpublishNotify" to subscribers. Default=off
    # on_publish http://www.example.com/plugin/Live/on_publish.php;			
    # on_play http://www.example.com/plugin/Live/on_play.php;
    # on_record_done http://www.example.com/plugin/Live/on_record_done.php';

    ## TRANSCODING USING FFMPEG EXEC ##
    ## EXEC - Many things are possible using exec. To learn more visit https://github.com/arut/nginx-rtmp-module/wiki/Directives#exec   ##
    ## You can either set this here, so all the incoming streams to /live/* get transcoded, or you can push to a seperate recorder app. ##
    ## The following lines will take our incoming RTMP stream and transcode it to several different HLS streams with variable bitrates  ##
    ## This ffmpeg command takes the input and transforms the source into 4 or 5 different streams with different bitrate and quality.  ##
    ## 4 or 5 different streams with different bitrate and quality. P.S. The scaling done here respects the aspect ratio of the input.  ##
    ## If you enable adaptive bitrate streams here, make sure to disable the stream-push to /hls below, under # STREAM RELAYING LOCAL # ##

    # exec ffmpeg -i rtmp://localhost/$app/$name  -async 1 -vsync -1		## Transcoding can be enabled here, or by using the abshls application below.
    # -c:v libx264 -acodec copy -b:v 256k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://localhost/hls/$name_low
    # -c:v libx264 -acodec copy -b:v 768k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://localhost/hls/$name_mid
    # -c:v libx264 -acodec copy -b:v 1024k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://localhost/hls/$name_high
    # -c:v libx264 -acodec copy -b:v 1920k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -g 60 -hls_list_size 0 -f flv rtmp://localhost/hls/$name_higher
    # -c copy -f flv rtmp://localhost/hls/$name_src;

    ## SET ACCESS RULES FOR APPLICATION /live  ##
    ## PUBLISHING ##
    allow 127.0.0.1;		# If you decice to harden these rules, it is adviced to uncomment this line.
    # allow publish 192.168.2.0/24;	# Anybody from this local IP address range can stream to this application.
    # allow publish 192.168.2.50;	# Allow a single IP address to stream to this application (multiple lines with different ip's are possible)
    allow publish all;		# Anybody from any location can stream to this application. Comment this out if you want to use deny publish.
    # deny publish 10.0.0.50;	# Deny this specific IP address from streaming to this application. Can also be an IP address range.
    # deny publish all;		# Nobody can stream to the server except those that you've set in previous lines.
    
    ## PLAYING  ##
    allow play 127.0.0.1;		# Localhost can play the stream from this application. Must be set if you decide to use push later on!
    allow play all;			# Anybody can play the RTMP livestream directly. Comment this out if you decide to use the next option.
    # deny play all;		# Nobody can play the RTMP stream except those that we've set in lines above it.

    ## RECORDING SETTINGS FOR /LIVE ##
    record all;			# off|all|audio|video|keyframes|manual. These options sorta speak for themselves.
    record_path /var/livestream/recordings;	# Folder location that will be used to store the recordings. YOU SHOULD CHANGE THIS TO YOUR PREFERENCE!
    record_suffix -%d-%b-%y-%T.flv;	# Added to recorded filenames. Example uses 'strftime' format results: -24-Apr-13-18:23:38.flv. Default=.flv
    record_unique on;		# on|off. Appends timestamp to recorded files. Otherwise the same file is re-written each time. Default=-off
    record_append on;		# on|off. When turned on recorder appends new data to the old file with no gap. Default=off
    record_lock off;		# on|off. When turned on recorded file gets locked with 'fcntl' call. Default=off.
    record_notify off;		# on|off. Toggles sending "NetStream.Record.Start" and "NetStream.Record.Stop" status messages. Default=off.
    # record_max_size 128K;		# Set maximum file size of the recorded files. No default.
    # record_max_frames 200;	# Sets maximum number of video frames per recorded file. No default.
    # record_interval 15m;		# Restart recording after this number of (milli)seconds/minutes. Zero means no delay. Default=off.
    # recorder name	{}		# Create recorder{} block. Multiple recorders can be created withing single application. Example:
    recorder audio {
      record audio;
      record_suffix .audio.flv;
      record_path /var/livestream/recordings/audio;
    }
    ## This will automatically convert your .flv recordings to mp4 when the stream/recording is stopped. WARNING! This will cause high CPU usage!! ##
          exec_push /usr/bin/mkdir -m 775 /var/livestream/hls/$name 2>>/tmp/er1.log; 
          exec_record_done /usr/local/bin/ffmpeg -i file:$path -c:a copy -c:v copy -g 48 -keyint_min 48 -sc_threshold 0 -hls_time 4 -hls_playlist_type vod -hls_segment_filename /var/livestream/hls/$name/$name_%03d.ts /var/livestream/hls/$name/index.m3u8 2>>/tmp/er2.log;

    ## RELAYING ##
    ## PULLING STREAMS ##
    ## For more info please visit:	https://github.com/arut/nginx-rtmp-module/wiki/Directives#relay ##
    ## pull url [key=value]*	# Creates pull relay. A stream is pulled from remote machine and becomes available locally. ##
    ## URL Syntax:			[rtmp://]host[:port][/app[/playpath]] ##
    # pull rtmp://cdn.example.com/live/ch?id=1234 name=channel_a;		# This is an example. Visit above url for more info.
    # session_relay off;		# on|off. On=relay is destroyed when connection is closed. Off=relay is destroyed when stream is closed. Default=off.

    ## PUSHING STREAMS ##
    ## Push has the same syntax as pull. Unlike pull, push directive publishes stream to remote server. ##
    ## This will push the stream from incoming /live application to these below to create HLS and/or Dash streams, or to record or transcode automatically. ##
    ## Only enable HLS push if you are not using ABS options earlier or by using the encoder application ##

    # push rtmp://localhost/hls;		# Remember to enable an app called HLS! Disable it if you use transcoding using variable bitrates.
    # push rtmp://localhost/dash;		# Remember to create the app dash! It is safe to disable this if you're not interested in using Dash.

    ## PUSH TO TRANSCODER APPLICATION ##
    # push rtmp://localhost/encoder;	# Enable this if you're not using the ABS options earlier but want to use a different application for it.

    ## PUSH TO RECORDER APPLICATION ##
    # push rtmp://localhost/recorder;	# Enable this if you want to record your stream and convert it to MP4 automatically when you stop the stream.

    ## STREAM RELAYING TO EXTERNAL PARTY'S ##
    ## Push can also be used to re-stream your stream to other platforms. You can do this directly or use an additional application for this. ##
    ## Using an additional local application allows you to set up variables if you prefer. Or you can choose to push to 3rd party directly. ##

    ## YOUTUBE PUSH OPTIONS ##
      # push rmtp://localhost/youtube;	# Uncomment this to use application on localhost (MUST BE SPECIFIED). OR simply use the following line:
      # push rtmp://a.rtmp.youtube.com/live2 /YOUR-LIVE-STREAM-KEY;	# Your RTMP stream will be pushed as it is to Youtube as an RTMP stream.
    ## TWITCH PUSH OPTIONS ##
      # push rmtp://localhost/twitch;		# Uncomment this to use application on localhost (MUST BE SPECIFIED). OR simply use the following line:
      # push rtmp://live-ams.twitch.tv/app /live_YOUR-LIVE-STREAM-KEY;	# Your RTMP stream will be pushed as it is to Twitch as an RTMP stream.
}	# CLOSING BRACKET /live

